{"version":3,"sources":["models/algorithm.ts","models/bubblesort.ts","models/mergesort.ts","models/bogosort.ts","models/insertionsort.ts","components/Diagram.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Algorithm","name","Object","classCallCheck","this","_name","createClass","key","get","value","ms","Promise","resolve","setTimeout","BubbleSort","_Algorithm","possibleConstructorReturn","getPrototypeOf","call","inherits","data","callback","n","i","temp","regenerator_default","a","async","_context","prev","next","length","awrap","sleep","stop","MergeSort","items","map","d","Item","mergeSort","original","middle","left","right","_context2","abrupt","Math","floor","slice","t0","t1","t2","sent","t3","t4","t5","t6","merge","result","indexLeft","indexRight","_context3","push","splice","index","item","concat","_value","_index","Bogosort","isSorted","_","InsertionSort","k","Diagram","_React$Component","props","_this","_chartRef","React","createRef","_algorithms","state","size","chart","undefined","algorithm","isSorting","chartRef","current","getContext","Chart","type","labels","x","toString","datasets","label","options","scales","yAxes","ticks","beginAtZero","animation","duration","legend","display","tooltips","enabled","setState","_this2","update","event","target","_this3","sort","then","forceUpdate","_this4","react_default","createElement","ref","className","onChange","selectAlgorithm","disabled","val","index_es","icon","faCogs","onClick","faSortAmountUp","shuffle","faRandom","Component","Footer","apply","arguments","faHeart","faGithub","href","faReact","App","role","process","Diagram_Diagram","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9dbdba80.chunk.js","sourcesContent":["export abstract class Algorithm {\n    private _name: string;\n    \n    constructor(name: string) {\n        this._name = name;\n    }\n\n    public abstract async sort(data: number[], callback: (data: number[]) => void): Promise<any>;\n\n    static sleep(ms: number) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    get name(): string {\n        return this._name;\n    }\n}","import { Algorithm } from \"./algorithm\";\n\nexport class BubbleSort extends Algorithm {\n    constructor() {\n        super(\"BubbleSort\");\n    }\n\n    async sort(data: number[], callback: (data: number[]) => void): Promise<void> {\n        for (let n = data.length; n > 1; --n) {\n            for (let i = 0; i < n - 1; ++i) {\n                if (data[i] > data[i + 1]) {\n                    // swap elements\n                    const temp = data[i + 1];\n                    data[i + 1] = data[i];\n                    data[i] = temp;\n\n                    // update diagram\n                    callback(data);\n                    await Algorithm.sleep(5);\n                }\n            }\n        }\n    }\n}","import { Algorithm } from \"./algorithm\";\n\nexport class MergeSort extends Algorithm {\n    constructor() {\n        super(\"MergeSort\");\n    }\n\n    async sort(data: number[], callback: (data: number[]) => void): Promise<void> {\n        let items = data.map((d, i) => new Item(d, i));\n        await this.mergeSort(items, data, callback);\n    }\n\n    // https://hackernoon.com/programming-with-js-merge-sort-deb677b777c0\n    async mergeSort(items: Item[], original: number[], callback: (data: number[]) => void): Promise<Item[]> {\n        if (items.length === 1) {\n            return items;\n        }\n\n        let middle = Math.floor(items.length / 2);\n        let left = items.slice(0, middle);\n        let right = items.slice(middle);\n        return await this.merge(await this.mergeSort(left, original, callback), await this.mergeSort(right, original, callback), original, callback);\n    }\n\n    async merge(left: Item[], right: Item[], original: number[], callback: (data: number[]) => void) {\n        const result = [];\n        let indexLeft = 0;\n        let indexRight = 0;\n\n        while (indexLeft < left.length && indexRight < right.length) {\n            if (left[indexLeft].value < right[indexRight].value) {\n                result.push(left[indexLeft]);\n                indexLeft++;\n            } else {\n                // https://stackoverflow.com/questions/5306680/move-an-array-element-from-one-array-position-to-another\n                original.splice(left[indexLeft].index, 0, original.splice(right[indexRight].index, 1)[0]);\n                right[indexRight].index = left[indexLeft].index;\n\n                // TODO fix no-loop-func\n                // eslint-disable-next-line\n                left = left.map((item, i) => {\n                    if (i >= indexLeft) {\n                       item.index += 1;\n                   }\n                    return item;\n                });\n                await Algorithm.sleep(10);\n                callback(original);\n\n                result.push(right[indexRight]);\n                indexRight++;\n            }\n        }\n\n        return result.concat(left.slice(indexLeft)).concat(right.slice(indexRight));\n    }\n\n\n\n}\n\nclass Item {\n    private _value: number;\n    private _index: number;\n\n    constructor(value: number, index: number) {\n        this._value = value;\n        this._index = index;\n    }\n\n\n    get value(): number {\n        return this._value;\n    }\n\n    get index(): number {\n        return this._index;\n    }\n\n    set value(value: number) {\n        this._value = value;\n    }\n\n    set index(value: number) {\n        this._index = value;\n    }\n}","import { Algorithm } from \"./algorithm\";\nimport * as _ from \"lodash\";\n\nexport class Bogosort extends Algorithm {\n    constructor() {\n        super(\"Bogosort\");\n    }\n\n    async sort(data: number[], callback: (data: number[]) => void): Promise<void> {\n        while (!Bogosort.isSorted(data)) {\n            // shuffle data as long it is not sorted\n            data = _.shuffle(data);\n\n            // update diagram\n            callback(data);\n            await Algorithm.sleep(5);\n        }\n    }\n\n    private static isSorted(data: number[]): boolean {\n        // if data has length smaller than 2, it is sorted by default\n        if (data.length < 2) {\n            return true;\n        }\n\n        for (let i = 0; i < data.length; i++) {\n            // if a smaller item follows a greater one, the data is not sorted\n            if (data[i] > data[i+1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n}","import { Algorithm } from \"./algorithm\";\n\nexport class InsertionSort extends Algorithm {\n    constructor() {\n        super(\"InsertionSort\");\n    }\n\n    async sort(data: number[], callback: (data: number[]) => void): Promise<void> {\n        for (let i = 0; i < data.length; i++) {\n            if (i > 0) {\n                for (let k = i; k >= 0; k--) {\n                    if (data[k] < data[k - 1]) {\n                        // if the element at k is smaller than the one at k-1, we need to swap them\n                        const temp = data[k - 1];\n                        data[k - 1] = data[k];\n                        data[k] = temp;\n\n                        // update diagram\n                        callback(data);\n                        await Algorithm.sleep(5);\n                    }\n                }\n            }\n        }\n    }\n\n}","import React from \"react\";\nimport { Chart } from \"chart.js\";\nimport * as _ from \"lodash\";\nimport { Algorithm, BubbleSort, MergeSort, Bogosort, InsertionSort } from \"../models\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCogs, faRandom, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface IDiagramProps {\n    size: number;\n}\n\ninterface IDiagramState {\n    data: number[];\n    chart: Chart | undefined;\n    algorithm: Algorithm;\n\n    isSorting: boolean;\n}\n\nexport class Diagram extends React.Component<IDiagramProps, IDiagramState> {\n    private _chartRef: any = React.createRef();\n    private _algorithms: Algorithm[];\n\n    constructor(props: IDiagramProps) {\n        super(props);\n        this._algorithms = [new MergeSort(), new BubbleSort(), new InsertionSort(), new Bogosort()];\n\n        // TODO shuffle again if already ordered\n        this.state = { data: _.shuffle(_.range(1, this.props.size + 1)), chart: undefined,\n            algorithm: this._algorithms[0], isSorting: false};\n    }\n\n    componentDidMount() {\n        const chartRef = this._chartRef.current.getContext(\"2d\");\n\n        const chart = new Chart(chartRef, {\n            type: \"bar\",\n            data: {\n                labels: this.state.data.map(x => x.toString()),\n                datasets: [\n                    {\n                        label: \"Data\",\n                        data: this.state.data,\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }\n                    ]\n                },\n                animation: {\n                    duration: 100\n                },\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                }\n            }\n        });\n\n        this.setState(() => ({\n            chart: chart\n        }));\n    }\n\n    shuffle() {\n        this.setState((state) => ({\n            // shuffle data\n            data: _.shuffle(state.data)\n        }), () => {\n            // update chart\n            this.state.chart!.data.datasets![0].data = this.state.data;\n            this.state.chart!.data.labels = this.state.data.map(x => x.toString());\n            this.state.chart!.update();\n        });\n\n    }\n\n    selectAlgorithm(event: any) {\n        // update the currently selected algorithm\n        this.setState({algorithm: this._algorithms[event.target.value]});\n    }\n\n    sort() {\n        this.setState({isSorting: true},\n            () => {\n                // sort the chart data using the currently selected algorithm\n                this.state.algorithm.sort(this.state.chart!.data.datasets![0].data as number[],\n                    (data) => this.update(data))\n                    .then(() => {\n                        this.setState({isSorting: false});\n                    }, () => {\n                        this.setState({isSorting: false});\n                    });\n            });\n    }\n\n    update(data: number[]) {\n        // update chart\n        this.state.chart!.data.datasets![0].data = data;\n        this.state.chart!.data.labels = data.map(x => x.toString());\n        this.state.chart!.update();\n        this.forceUpdate();\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref={this._chartRef} />\n                <div className=\"field has-addons has-addons-centered\">\n                    <div className=\"control has-icons-left\">\n                        <div className=\"select\">\n                            <select onChange={(event: any) => this.selectAlgorithm(event)} disabled={this.state.isSorting}>\n                                {/* the value property of each option is set to the index of the algorithm in the array */}\n                                {this._algorithms.map((val: Algorithm, index: number) =>\n                                    <option key={index} value={index}>{val.name}</option>)}\n                            </select>\n                            <span className=\"icon is-left\">\n                                <FontAwesomeIcon icon={faCogs} />\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button\" onClick={() => this.sort()} disabled={this.state.isSorting}>\n                            <FontAwesomeIcon icon={faSortAmountUp} />&nbsp;Sort\n                        </button>\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button\" onClick={() => this.shuffle()} disabled={this.state.isSorting}>\n                            <FontAwesomeIcon icon={faRandom} />&nbsp;Shuffle\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub, faReact } from \"@fortawesome/free-brands-svg-icons\";\n\nexport class Footer extends React.Component {\n    render() {\n        return (\n            <div className=\"footer has-text-centered is-size-7 has-text-grey\">\n                <div>\n                    Made with <FontAwesomeIcon icon={faHeart} />&nbsp;\n                    by <FontAwesomeIcon icon={faGithub} />&nbsp;<a href=\"https://github.com/srehwald\">srehwald</a>\n                </div>\n                <div>\n                    using <FontAwesomeIcon icon={faReact} />&nbsp;\n                    <a href=\"https://reactjs.org\">React</a>, <a href=\"https://bulma.io\">Bulma</a> and <a href=\"https://www.chartjs.org\">Chart.js</a>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Diagram, Footer } from \"./components/\";\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"container\">\n          <nav className=\"navbar\" role=\"navigation\">\n              <div className=\"navbar-brand\">\n                  <a href={process.env.PUBLIC_URL + \"/\"} className=\"navbar-item\">\n                      Fancy Sort Algos\n                  </a>\n              </div>\n          </nav>\n          <div className=\"App\">\n              <Diagram size={100}/>\n              <Footer/>\n          </div>\n      </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}