{"version":3,"sources":["models/algorithm.ts","models/bubblesort.ts","models/mergesort.ts","models/bogosort.ts","models/insertionsort.ts","models/util.ts","components/Diagram.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Algorithm","name","Object","classCallCheck","this","_name","createClass","key","get","BubbleSort","_Algorithm","possibleConstructorReturn","getPrototypeOf","call","inherits","value","data","steps","n","length","i","temp","push","_","MergeSort","items","map","d","Item","mergeSort","original","middle","Math","floor","left","slice","right","merge","result","indexLeft","indexRight","splice","index","item","concat","_value","_index","Bogosort","counter","isSorted","MAX_ITERATIONS","InsertionSort","k","Util","ms","Promise","resolve","setTimeout","Diagram","_React$Component","props","_this","_chartRef","React","createRef","_algorithms","size","algorithm","sort","state","chart","undefined","isPaused","isStopped","_this2","document","addEventListener","event","handleKeys","chartRef","current","getContext","Chart","type","labels","x","toString","datasets","label","options","scales","yAxes","ticks","beginAtZero","animation","duration","legend","display","tooltips","enabled","setState","_this3","removeEventListener","_this4","startSort","update","_this5","target","stopSort","_this6","step","additionalSteps","regenerator_default","a","async","_context","prev","next","Number","MAX_SAFE_INTEGER","abrupt","awrap","sleep","continueSort","stop","_this7","_this8","_this9","forceUpdate","keyCode","prevStep","nextStep","shuffle","pauseSort","_this10","react_default","createElement","id","ref","className","onChange","selectAlgorithm","val","index_es","icon","faCogs","onClick","disabled","faPlay","faPause","faRandom","faStop","faStepBackward","faStepForward","Component","Footer","apply","arguments","faHeart","faGithub","href","faReact","App","role","process","Diagram_Diagram","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f75adffa.chunk.js","sourcesContent":["export abstract class Algorithm {\n    private _name: string;\n    \n    constructor(name: string) {\n        this._name = name;\n    }\n\n    public abstract sort(data: number[]): number[][];\n\n    get name(): string {\n        return this._name;\n    }\n}","import { Algorithm } from \"./algorithm\";\nimport * as _ from \"lodash\";\n\nexport class BubbleSort extends Algorithm {\n    constructor() {\n        super(\"BubbleSort\");\n    }\n\n    sort(data: number[]): number[][] {\n        const steps: number[][] = [];\n\n        for (let n = data.length; n > 1; --n) {\n            for (let i = 0; i < n - 1; ++i) {\n                if (data[i] > data[i + 1]) {\n                    // swap elements\n                    const temp = data[i + 1];\n                    data[i + 1] = data[i];\n                    data[i] = temp;\n\n                    steps.push(_.clone(data));\n                }\n            }\n        }\n\n        return steps;\n\n    }\n}","import { Algorithm } from \"./algorithm\";\nimport * as _ from \"lodash\";\n\nexport class MergeSort extends Algorithm{\n    constructor() {\n        super(\"MergeSort\");\n    }\n\n    sort(data: number[]): number[][] {\n        let items = data.map((d, i) => new Item(d, i));\n        const steps: number[][] = [];\n\n        this.mergeSort(items, data, steps);\n        return steps;\n    }\n\n    // https://hackernoon.com/programming-with-js-merge-sort-deb677b777c0\n    mergeSort(items: Item[], original: number[], steps: number[][]): Item[] {\n        if (items.length === 1) {\n            return items;\n        }\n\n        let middle = Math.floor(items.length / 2);\n        let left = items.slice(0, middle);\n        let right = items.slice(middle);\n        return this.merge(this.mergeSort(left, original, steps), this.mergeSort(right, original, steps), original, steps);\n    }\n\n    merge(left: Item[], right: Item[], original: number[], steps: number[][]) {\n        const result = [];\n        let indexLeft = 0;\n        let indexRight = 0;\n\n        while (indexLeft < left.length && indexRight < right.length) {\n            if (left[indexLeft].value < right[indexRight].value) {\n                result.push(left[indexLeft]);\n                indexLeft++;\n            } else {\n                // https://stackoverflow.com/questions/5306680/move-an-array-element-from-one-array-position-to-another\n                original.splice(left[indexLeft].index, 0, original.splice(right[indexRight].index, 1)[0]);\n                right[indexRight].index = left[indexLeft].index;\n\n                // TODO fix no-loop-func\n                // eslint-disable-next-line\n                left = left.map((item, i) => {\n                    if (i >= indexLeft) {\n                       item.index += 1;\n                   }\n                    return item;\n                });\n                \n                steps.push(_.clone(original));\n\n                result.push(right[indexRight]);\n                indexRight++;\n            }\n        }\n\n        return result.concat(left.slice(indexLeft)).concat(right.slice(indexRight));\n    }\n\n\n\n}\n\nclass Item {\n    private _value: number;\n    private _index: number;\n\n    constructor(value: number, index: number) {\n        this._value = value;\n        this._index = index;\n    }\n\n\n    get value(): number {\n        return this._value;\n    }\n\n    get index(): number {\n        return this._index;\n    }\n\n    set value(value: number) {\n        this._value = value;\n    }\n\n    set index(value: number) {\n        this._index = value;\n    }\n}","import { Algorithm } from \"./algorithm\";\nimport * as _ from \"lodash\";\n\nexport class Bogosort extends Algorithm{\n    private static readonly MAX_ITERATIONS = 1337;\n\n    constructor() {\n        super(\"Bogosort\");\n    }\n\n    sort(data: number[]): number[][]{\n        const steps: number[][] = [];\n        let counter = 0;\n\n        while (!Bogosort.isSorted(data) && counter < Bogosort.MAX_ITERATIONS) {\n            // shuffle data as long it is not sorted\n            data = _.shuffle(data);\n            steps.push(_.clone(data));\n            counter++;\n        }\n\n        return steps;\n    }\n\n    private static isSorted(data: number[]): boolean {\n        // if data has length smaller than 2, it is sorted by default\n        if (data.length < 2) {\n            return true;\n        }\n\n        for (let i = 0; i < data.length; i++) {\n            // if a smaller item follows a greater one, the data is not sorted\n            if (data[i] > data[i+1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n}","import { Algorithm } from \"./algorithm\";\nimport * as _ from \"lodash\";\n\nexport class InsertionSort extends Algorithm{\n    constructor() {\n        super(\"InsertionSort\");\n    }\n\n    sort(data: number[]): number[][] {\n        const steps: number[][] = [];\n\n        for (let i = 0; i < data.length; i++) {\n            if (i > 0) {\n                for (let k = i; k >= 0; k--) {\n                    if (data[k] < data[k - 1]) {\n                        // if the element at k is smaller than the one at k-1, we need to swap them\n                        const temp = data[k - 1];\n                        data[k - 1] = data[k];\n                        data[k] = temp;\n\n                        steps.push(_.clone(data));\n                    }\n                }\n            }\n        }\n\n        return steps;\n    }\n\n}","export class Util {\n    static sleep(ms: number) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    static isSorted(data: number[]): boolean {\n        // if data has length smaller than 2, it is sorted by default\n        if (data.length < 2) {\n            return true;\n        }\n\n        for (let i = 0; i < data.length; i++) {\n            // if a smaller item follows a greater one, the data is not sorted\n            if (data[i] > data[i+1]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","import React from \"react\";\nimport { Chart } from \"chart.js\";\nimport * as _ from \"lodash\";\nimport { Algorithm, BubbleSort, MergeSort, Bogosort, InsertionSort, Util } from \"../models\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCogs, faRandom, faStop, faStepBackward, faStepForward, faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface IDiagramProps {\n    size: number;\n}\n\ninterface IDiagramState {\n    data: number[];\n    chart: Chart | undefined;\n    algorithm: Algorithm;\n\n    index: number;\n    steps: number[][];\n    isPaused: boolean;\n    isStopped: boolean;\n}\n\nexport class Diagram extends React.Component<IDiagramProps, IDiagramState> {\n    private _chartRef: any = React.createRef();\n    private _algorithms: Algorithm[];\n\n    constructor(props: IDiagramProps) {\n        super(props);\n        this._algorithms = [new MergeSort(), new BubbleSort(), new InsertionSort(), new Bogosort()];\n\n        // TODO shuffle again if already ordered\n        const data = _.shuffle(_.range(1, this.props.size + 1));\n        const algorithm = this._algorithms[0];\n        const steps = algorithm.sort(_.clone(data));\n\n        this.state = { data: data, chart: undefined, algorithm: algorithm,\n            steps: steps, index: 0, isPaused: false, isStopped: true};\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", event => this.handleKeys(event));\n        const chartRef = this._chartRef.current.getContext(\"2d\");\n\n        const chart = new Chart(chartRef, {\n            type: \"bar\",\n            data: {\n                labels: this.state.data.map(x => x.toString()),\n                datasets: [\n                    {\n                        label: \"Data\",\n                        data: this.state.data,\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }\n                    ]\n                },\n                animation: {\n                    duration: 0\n                },\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                }\n            }\n        });\n\n        this.setState({chart: chart});\n    }\n\n    componentWillUnmount(){\n        document.removeEventListener(\"keydown\", event => this.handleKeys(event));\n      }\n\n    shuffle() {\n        this.setState({data: _.shuffle(this.state.data)}, () => {\n            this.startSort();\n            // update chart\n            this.state.chart!.data.datasets![0].data = this.state.data;\n            this.state.chart!.data.labels = this.state.data.map(x => x.toString());\n            this.state.chart!.update();\n        });\n\n    }\n\n    selectAlgorithm(event: any) {\n        // update the currently selected algorithm\n        this.setState({algorithm: this._algorithms[event.target.value]}, () => {\n            this.stopSort();\n            this.startSort();\n        });\n    }\n\n    startSort() {\n        let steps = this.state.algorithm.sort(_.clone(this.state.data));\n        this.setState({steps: steps, index: 0});\n    }\n\n    continueSort() {\n        // do nothing if end of steps is reached\n        if (this.state.index >= this.state.steps.length - 1) {\n            return;\n        }\n        this.setState({isPaused: false, isStopped: false},\n            async () => {\n                // TODO possibly warning if max integer reached?\n                for (let i = this.state.index; i < Number.MAX_SAFE_INTEGER && i < this.state.steps.length; i++) {\n                    if (this.state.isPaused) {\n                        // save current index so that we can step through\n                        this.setState({index: i});\n                        return;\n                    } else if (this.state.isStopped) {\n                        return;\n                    }\n\n                    // get current step\n                    const step = this.state.steps[i];\n                    // update diagram with current data\n                    this.update(step);\n                    // delay\n                    await Util.sleep(10);\n\n                    if (i === this.state.steps.length - 1 && !Util.isSorted(step)) {\n                        /*\n                        algorithms like Bogosort do not guarantee to sort data. Hence, even after running them for\n                        many iterations, it might be that we still did not reach a sorted state. To make sure that they\n                        can basically run forever, we compute some additional sorting steps.\n                        */\n                        const additionalSteps = this.state.algorithm.sort(step);\n                        return this.setState({steps: this.state.steps.concat(additionalSteps)}, () => this.continueSort());\n                    }\n                }\n\n                this.setState({index: this.state.steps.length - 1, isPaused: true, isStopped: false});\n            });\n    }\n\n    pauseSort() {\n        this.setState({isPaused: true});\n    }\n\n    stopSort() {\n        this.setState({isStopped: true, isPaused: false, index: 0}, () => {\n            this.update(this.state.data);\n        });\n    }\n\n    nextStep() {\n        if (this.state.index < this.state.steps.length - 1) {\n            this.setState({index: this.state.index + 1},() => this.update(this.state.steps[this.state.index]));\n        }\n    }\n\n    prevStep() {\n        if (this.state.index > 0) {\n            this.setState({index: this.state.index - 1}, () => this.update(this.state.steps[this.state.index]));\n        }\n    }\n\n    update(data: number[]) {\n        // update chart\n        this.state.chart!.data.datasets![0].data = data;\n        this.state.chart!.data.labels = data.map(x => x.toString());\n        this.state.chart!.update();\n        this.forceUpdate();\n    }\n\n    handleKeys(event: any) {\n        if (this.state.isPaused || this.state.isStopped) {\n            if (event.keyCode === 37) {\n                // [arrowleft]\n                this.prevStep();\n            } else if (event.keyCode === 39) {\n                // [arrowright]\n                this.nextStep();\n            } else if (event.keyCode === 32) {\n                // [spacebar]\n                this.continueSort();\n            } else if (event.keyCode === 8) {\n                if (this.state.isPaused) {\n                    // [backspace] stop if sorting is paused\n                    this.stopSort();\n                } else {\n                    // [backspace] shuffle if sorting is stopped\n                    this.shuffle()\n                }\n            }\n        } else if (event.keyCode === 32) {\n            // [spacebar] pause if sort is running\n            this.pauseSort();\n        } else if (event.keyCode === 8) {\n            // [backspace] stop if sort is running\n            this.stopSort();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas id=\"chart\" ref={this._chartRef} />\n                <div className=\"field has-addons has-addons-centered\">\n                    <div className=\"control has-icons-left\">\n                        <div className=\"select\">\n                            <select onChange={event => this.selectAlgorithm(event)}>\n                                {/* the value property of each option is set to the index of the algorithm in the array */}\n                                {this._algorithms.map((val: Algorithm, index: number) =>\n                                    <option key={index} value={index}>{val.name}</option>)}\n                            </select>\n                            <span className=\"icon is-left\">\n                                <FontAwesomeIcon icon={faCogs} />\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"control\">\n                        {(() => {\n                            if (this.state.isPaused || this.state.isStopped) {\n                                return (\n                                    <button className=\"button is-success\" onClick={() => this.continueSort()}\n                                        disabled={this.state.index >= this.state.steps.length - 1}>\n                                        <FontAwesomeIcon icon={faPlay} />\n                                    </button>\n                                );\n                            } else {\n                                return (\n                                    <button className=\"button is-warning\" onClick={() => this.pauseSort()}>\n                                        <FontAwesomeIcon icon={faPause} />\n                                    </button>\n                                );\n                            }\n                        })()}\n                    </div>\n                    <div className=\"control\">\n                        {(() =>{\n                            if (this.state.isStopped) {\n                                return (\n                                    <button className=\"button is-info\" onClick={() => this.shuffle()}>\n                                        <FontAwesomeIcon icon={faRandom} />\n                                    </button>\n                                );\n                            } else {\n                                return (\n                                    <button className=\"button is-danger\" onClick={() => this.stopSort()}>\n                                        <FontAwesomeIcon icon={faStop} />\n                                    </button>\n                                );\n                            }\n                        })()}\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button is-link\" onClick={() => this.prevStep()}\n                            disabled={!(this.state.isPaused || this.state.isStopped)}>\n                            <FontAwesomeIcon icon={faStepBackward} />\n                        </button>\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button is-link\" onClick={() => this.nextStep()}\n                            disabled={!(this.state.isPaused || this.state.isStopped)}>\n                            <FontAwesomeIcon icon={faStepForward} />\n                        </button>\n                    </div>\n                </div>\n                <div className=\"is-size-7 has-text-grey\">\n                    Hint: You can use your arrow keys to step forward/backwards, your spacebar for play/pause and backspace for stop/shuffle.\n                </div>\n                {/* TODO hint for using arrow keys */}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub, faReact } from \"@fortawesome/free-brands-svg-icons\";\n\nexport class Footer extends React.Component {\n    render() {\n        return (\n            <div className=\"footer has-text-centered is-size-7 has-text-grey\">\n                <div>\n                    Made with <FontAwesomeIcon icon={faHeart} />&nbsp;\n                    by <FontAwesomeIcon icon={faGithub} />&nbsp;<a href=\"https://github.com/srehwald\">srehwald</a>\n                </div>\n                <div>\n                    using <FontAwesomeIcon icon={faReact} />&nbsp;\n                    <a href=\"https://reactjs.org\">React</a>, <a href=\"https://bulma.io\">Bulma</a> and <a href=\"https://www.chartjs.org\">Chart.js</a>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Diagram, Footer } from \"./components/\";\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"container\">\n          <nav className=\"navbar\" role=\"navigation\">\n              <div className=\"navbar-brand\">\n                  <a href={process.env.PUBLIC_URL + \"/\"} className=\"navbar-item\">\n                      Fancy Sort Algos\n                  </a>\n              </div>\n          </nav>\n          <div className=\"App\">\n              <Diagram size={100}/>\n              <Footer/>\n          </div>\n      </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}